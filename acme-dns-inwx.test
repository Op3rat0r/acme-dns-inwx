#!/bin/bash
###
# Simple test script for acme-dns-inwx. (add/chk & del/chk)
# v0.1.0 (2016-10-24) by Christian Schr√∂tter <cs@fnx.li>
###

set -euf -o pipefail
cd "$(dirname "$(readlink -f "$0")")"

#return=0
#/bin/true || return=$? && :
#echo $return; exit;

tmpfile=`mktemp`; logfile=`mktemp`
echo "Logfile for errors: ${logfile}"

function status
{
	echo -ne "\r$(date +%H:%M:%S) [$1] $2$3"
}

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RESET='\033[0m'

for i in {1..100}
do
	# \n
	echo

	# Get random values for hostname and TXT record data.
	hostname="test-$(printf '%05d' "${RANDOM}")-$(printf '%05d' "${RANDOM}").fnx.li"
	txtvalue="test-${RANDOM}-${RANDOM}-${RANDOM}-$(date +%Y%m%d-%H%M%S)"

	# Try to add the DNS record.
	status "${YELLOW}ADD RR${RESET}" "${hostname}" ""
	return=0; ./acme-dns-inwx "${hostname}" "${txtvalue}" 2>>"${logfile}" || return=$? && :

	if [[ "$return" != "0" ]]
	then
		status "${RED}ADD RR${RESET}" "${hostname}" ": Failed!  (could not create or update DNS-RR)"
		continue;
	fi

	# Wait for the primary NS to update its zone...
	status "${YELLOW}WAIT#1${RESET}" "${hostname}" ""
	sleep 60;

	# Check the DNS record.
	status "${YELLOW}CHK #1${RESET}" "${hostname}" ""
	return=0; dig +short "TXT" "_acme-challenge.${hostname}" @ns1.fnx.li >"${tmpfile}" || return=$? && :

	if [[ "$return" != "0" || "$(cat "${tmpfile}")" != "\"${txtvalue}\"" ]]
	then
		status "${RED}CHK #1${RESET}" "${hostname}" ": Failed!  (value not found in DNS)"
		continue;
	fi

	# Try to delete the DNS record.
	status "${YELLOW}DEL RR${RESET}" "${hostname}" ""
	return=0; ./acme-dns-inwx "${hostname}" 2>>"${logfile}" || return=$? && :

	if [[ "$return" != "0" ]]
	then
		status "${RED}DEL RR${RESET}" "${hostname}" ": Failed!  (could not delete DNS-RR)"
		continue;
	fi

	# Wait for the DNS cache to expire...
	status "${YELLOW}WAIT#2${RESET}" "${hostname}" ""
	sleep 301;

	# Check the DNS record.
	status "${YELLOW}CHK #2${RESET}" "${hostname}" ""
	return=0; dig +short "TXT" "_acme-challenge.${hostname}" @ns1.fnx.li >"${tmpfile}" || return=$? && :

	if [[ "$return" != "0" || "$(cat "${tmpfile}")" != "" ]]
	then
		status "${RED}CHK #2${RESET}" "${hostname}" ": Failed!  (record still exists)"
		continue;
	fi

	# Wait for the next test run...
	status "${GREEN}  OK  ${RESET}" "${hostname}" ": Success!"
	sleep 10

done

if [[ "0$(stat --printf="%s" "${logfile}")" == "00" ]]
then
	echo -e "\n\nDeleting empty logfile: ${logfile}"
	rm -f "${logfile}"
else
	echo -e "\n\nLogfile is not empty: ${logfile}"
fi

rm -f "${tmpfile}"
